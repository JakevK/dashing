{"version":3,"sources":["pages/images/left_arrow.svg","pages/images/alphabet.png","pages/images/telegraph.gif","pages/Home.jsx","pages/Theory.jsx","pages/History.jsx","pages/practice/resources/randomWord.jsx","pages/practice/EnglishToMorse.jsx","pages/practice/MorseToEnglish.jsx","pages/Practice.jsx","pages/Error.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","useEffect","nav","document","getElementsByTagName","previousStyles","getComputedStyle","style","height","paddingTop","boxShadow","firstChild","display","ul","children","previousUl","width","justifyContent","descriptions","theory","history","practice","child","p","createElement","description","innerHTML","toLowerCase","text","createTextNode","appendChild","margin","removeChild","className","Theory","src","alphabet","alt","href","History","telegraph","randomWord","words","Math","floor","random","length","morse","dictionary","value","EnglishToMorse","useState","word","setWord","position","setPosition","input","setInput","editable","setEditable","answerShown","setAnswerShown","to","left_arrow","transform","type","onKeyDown","event","newInput","key","slice","setTimeout","onClick","possibleChars","push","translate","english","split","map","x","join","MorseToEnglish","correct","setCorrect","includes","isCorrect","Practice","match","useRouteMatch","path","App","Routes","location","useLocation","activeClassName","TransitionGroup","CSSTransition","classNames","timeout","component","Pages","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7004aae6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/left_arrow.3ef9ed23.svg\";","module.exports = __webpack_public_path__ + \"static/media/alphabet.c7f0f255.png\";","module.exports = __webpack_public_path__ + \"static/media/telegraph.9221b477.gif\";","/* Home\n * landing page / home page\n */\n\n/* -- imports -- */\nimport React, { useEffect } from \"react\";\nimport \"../styles/home.css\";\n\n// Exported component\nexport default function Home() {\n  // run on component mount - empty array as second parameter\n  useEffect(() => {\n    // apply styling to move navigation bar down and remove title\n    let nav = document.getElementsByTagName(\"nav\")[0];\n    const previousStyles = getComputedStyle(nav);\n    nav.style.height = \"100vh\";\n    nav.style.paddingTop = \"300px\";\n    nav.style.boxShadow = \"none\";\n    nav.firstChild.style.display = \"none\";\n    let ul = nav.children[1];\n    const previousUl = getComputedStyle(ul);\n    ul.style.width = \"100%\";\n    ul.style.display = \"flex\";\n    ul.style.justifyContent = \"center\";\n\n    // define descriptions for nav links\n    const descriptions = {\n      theory: \"Learn about how morse code works\",\n      history: \"Discover how morse code came to be\",\n      practice: \"Have some fun and improve your skills\",\n    };\n    // add descriptions to each nav link and give them some styling\n    for (let child of ul.children) {\n      let p = document.createElement(\"p\");\n      let desc = child.firstChild;\n      let key = desc.innerHTML.toLowerCase();\n      let description = descriptions[key];\n      let text = document.createTextNode(description);\n      p.appendChild(text);\n      child.firstChild.appendChild(p);\n      child.style.margin = \"25px 50px\";\n    }\n\n    // runs on component unmount\n    return () => {\n      // reset styling of navbar to what it was before\n      nav.style = previousStyles;\n      nav.firstChild.style.display = \"block\";\n      ul.style = previousUl;\n      for (let child of ul.children) {\n        child.firstChild.removeChild(child.firstChild.children[0]);\n        child.style.margin = \"25px 0 0 0\";\n      }\n    };\n  }, []);\n\n  // return static HTML content\n  return (\n    <div>\n      <div className=\"container top-container\">\n        <h1 className=\"main-title\">dashing</h1>\n        <h2 className=\"sub-title\">Dial in your morse code skills</h2>\n      </div>\n    </div>\n  );\n}\n","/* Theory\n * Brief summary of how morse code works\n */\n\n/* -- imports -- */\nimport React from \"react\";\nimport \"../styles/static.css\";\nimport alphabet from \"./images/alphabet.png\";\n\n// exported component\nexport default function Theory() {\n  // return static HTML content\n  return (\n    <div className=\"container static\">\n      <h1>Theory</h1>\n      <p>\n        In international morse code, the most popular form and the one we will\n        be learning, characters are made up of sequences of dots and dashes,\n        also referred to as dits and dahs. The length of a dash is three times\n        that of a dot, with each having one dot worth of space between them.\n        Between characters, a pause lasting the length of three dots is used,\n        and a pause measuring seven dots long should divide each word.\n      </p>\n      <p>\n        The representations of letters in morse code were constructed with\n        character frequency in mind. For maximum efficiency, the letters that\n        are used most commonly in English, such as \"E\" and \"T\" have the shortest\n        morse code representations. The morse code translations for each letter\n        in the English alphabet are shown below:\n      </p>\n      <img src={alphabet} alt=\"morse code alphabet\" />\n      <div className=\"caption\">\n        The morse code alphabet (\n        <a href=\"https://internationaljournalofresearch.com/2020/07/15/history-of-morse-code-2/\">\n          source\n        </a>\n        )\n      </div>\n      <p>\n        You may recognise some of these letters already, in particular the\n        representations for \"S\" and \"O\", due to their use in the well known\n        univeral signal of distress, \"SOS\". This combination of letters was\n        chosen specifically for this purpose because of the simplicity and\n        symmetry in their encodings. Three dots, followed by three dashes,\n        followed by three dots, an iconic sequence that almost anyone can recall\n        and understand, regardless of possible language barriers.\n      </p>\n    </div>\n  );\n}\n","/* History\n * Brief summary of morse code history\n */\n\n/* -- imports -- */\nimport React from \"react\";\nimport \"../styles/static.css\";\nimport telegraph from \"./images/telegraph.gif\";\n\n// exported component\nexport default function History() {\n  // return static HTML content\n  return (\n    <div className=\"container static\">\n      <h1>History</h1>\n      <p>\n        In the past, the primary method of long distance communication was\n        through a human messenger who would have to travel by foot or horse in\n        order to deliver a memorized or written message to the recipient. The\n        problem with this was that humans and horses are unreliable and slow,\n        limiting the effectiveness with which a message could be sent. A new\n        solution was required.\n      </p>\n      <p>\n        In 1837, two Englishmen named William Fothergill Cooke and Charles\n        Wheatstone invented a machine called the telegraph. Initially, it would\n        send messages through electrical signals which would line up compass\n        needles on a grid to point to a specific letter of the alphabet. This\n        allowed messages to be sent very quickly over long distances.\n      </p>\n      <img src={telegraph} alt=\"telegraph\" />\n      <div className=\"caption\">\n        An old telegraph machine (\n        <a href=\" http://invention.smithsonian.org/resources/fa_wu_telegraphregister.aspx\">\n          source\n        </a>\n        )\n      </div>\n      <p>\n        However, a certain artist and inventor from the USA was not satisfied\n        with this solution. He devised his own system of encoding and decoding\n        words, which used pulses of electricity. These pulses were transmitted\n        in varying lengths, with different sequences and permutations\n        representing different characters. This man's name was Samuel F.B.\n        Morse, and this code would be known as morse code.\n      </p>\n      <p>\n        Eventually, in the year 1851, a conference in Berlin brought about the\n        standardization of an international version of morse code. This form of\n        encoding quickly became the most popular method of long distance\n        communication over telegraph, due to its simplicity and efficiency. Even\n        today, where the telegraph has been rendered near obsolete by more\n        modern forms of communication, some organisations such as the US Navy\n        still use morse code to transmit messages, and international morse code\n        is the encoding method of choice for hobbyists and professionals alike.\n      </p>\n    </div>\n  );\n}\n","import words from \"./words.json\";\n\nconst randomWord = () =>\n  words[Math.floor(Math.random() * words.length)].toLowerCase();\n\nexport default randomWord;\n","/* EnglishToMorse\n * Practice mode for converting english text to morse code\n */\n\n/* -- imports -- */\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport left_arrow from \"../images/left_arrow.svg\";\n\nimport \"../../styles/practice.css\";\n\nimport randomWord from \"./resources/randomWord.jsx\";\nimport dictionary from \"./resources/dictionary.json\";\n\n// create a dictionary from the dictionary.json file and define each\n// value as the morse code translation of its key\nlet morse = {};\nfor (let value of dictionary) {\n  morse[value[\"char\"]] = value[\"morse\"];\n}\n\n// Exported component\nexport default function EnglishToMorse() {\n  // current word to translate\n  let [word, setWord] = useState(randomWord());\n  // current position of translation in word\n  let [position, setPosition] = useState(0);\n  // keeps track of current user input\n  let [input, setInput] = useState(\"\");\n  // controls the editability of the text input\n  let [editable, setEditable] = useState(true);\n  // controls whether or not the answer is shown\n  let [answerShown, setAnswerShown] = useState(false);\n\n  // set the answer to be shown\n  const showAnswer = () => {\n    setAnswerShown(true);\n  };\n\n  // processes input when the user tries to type something\n  const handleInput = (event) => {\n    // shouldn't do anything, because not editable\n    if (!editable) return;\n\n    // work out whether to add a dot or a dash, remove a char (backspace),\n    // or to not add anything (invalid input)\n    let newInput =\n      event.key === \"Backspace\"\n        ? input.slice(0, input.length - 1)\n        : input + (event.key === \".\" ? \".\" : event.key === \"/\" ? \"-\" : \"\");\n\n    // update state with the new value\n    setInput(newInput);\n\n    // check inputted value against correct translation\n    const correctInput = morse[word[position]];\n    if (newInput === correctInput) {\n      //input is correct\n      setAnswerShown(false);\n      setEditable(false);\n      // add a small delay so that the user has time to see what happened\n      setTimeout(() => {\n        if (position === word.length - 1) {\n          // word is complete; get a new one\n          setWord(randomWord());\n          setPosition(0);\n        } else {\n          // go to next character\n          setPosition(position + 1);\n        }\n        // reset input and allow for further input\n        setInput(\"\");\n        setEditable(true);\n      }, 100);\n    }\n  };\n\n  // return HTML to be rendered - self explanatory\n  return (\n    <div className=\"container practice-main\">\n      <Link to=\"/practice\" className=\"back-link\">\n        <img src={left_arrow} className=\"left-arrow\" alt=\"<-\" />\n        Change practice mode\n      </Link>\n      <div className=\"practice-container\">\n        <div className=\"highlight\" />\n        <div\n          className=\"question\"\n          style={{\n            transform: `translateX(calc(50vw - (28.8px / 2) - (28.8px * ${position})))`,\n          }}\n        >\n          {word}\n        </div>\n        <input\n          type=\"text\"\n          className={!editable ? \"green-input\" : \"\"}\n          onKeyDown={handleInput}\n          value={input}\n        />\n        <div className=\"p-container\">\n          <p>\n            Enter the morse code translation for the current letter in the box\n            above using the \".\" and \"/\" keys.\n          </p>\n        </div>\n        <div\n          className=\"answer\"\n          style={{ display: answerShown ? \"block\" : \"none\" }}\n        >\n          Answer: {morse[word[position]]}\n        </div>\n        <div\n          className=\"reveal-btn\"\n          style={{ display: answerShown ? \"none\" : \"block\" }}\n          onClick={showAnswer}\n        >\n          Show answer\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* MorseToEnglish\n * Practice mode for converting morse code text to english\n */\n\n/* -- inports -- */\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport left_arrow from \"../images/left_arrow.svg\";\n\nimport \"../../styles/practice.css\";\n\nimport randomWord from \"./resources/randomWord.jsx\";\nimport dictionary from \"./resources/dictionary.json\";\n\n// create a dictionary from the dictionary.json file and define each\n// value as the morse code translation of its key\n// also record possible characters for validating input later\nlet morse = {};\nconst possibleChars = [];\nfor (let value of dictionary) {\n  morse[value[\"char\"]] = value[\"morse\"];\n  possibleChars.push(value[\"char\"]);\n}\n// function to translate any english text into morse code\nconst translate = (english) =>\n  english\n    .split(\"\")\n    .map((x) => morse[x])\n    .join(\" \");\n\n// exported component\nexport default function MorseToEnglish() {\n  // current word to translate\n  let [word, setWord] = useState(randomWord());\n  // current position of translation in word\n  let [position, setPosition] = useState(0);\n  // keeps track of current user input\n  let [input, setInput] = useState(\"\");\n  // true/false for if user input is correct or not, null for not determined\n  let [correct, setCorrect] = useState(null);\n  // controls whether or not the answer is shown\n  let [answerShown, setAnswerShown] = useState(false);\n\n  // set the answer to be shown\n  const showAnswer = () => {\n    setAnswerShown(true);\n  };\n\n  // processes input when the user tries to types something\n  const handleInput = (event) => {\n    // if correctness has been determined, exit as text should not\n    // be inputted until the callback has been triggered\n    if (correct !== null) return;\n    // don't allow input of invalid characters\n    if (!possibleChars.includes(event.key)) return;\n\n    // update state with new input\n    setInput(event.key);\n\n    // check inputted value against correct value\n    const isCorrect = event.key === word[position];\n    // update state with this value\n    setCorrect(isCorrect);\n\n    // add small delay so user has time to see what happened\n    setTimeout(() => {\n      // reset input and allow user to type again\n      setCorrect(null);\n      setInput(\"\");\n\n      if (isCorrect) {\n        // input is correct\n        setAnswerShown(false);\n\n        if (position === word.length - 1) {\n          // word is complete; get a new one\n          setPosition(0);\n          setWord(randomWord());\n        } else {\n          // go to next character\n          setPosition(position + 1);\n        }\n      }\n    }, 100);\n  };\n\n  // return HTML to be rendered - self explanatory\n  return (\n    <div className=\"container practice-main\">\n      <Link to=\"/practice\" className=\"back-link\">\n        <img src={left_arrow} className=\"left-arrow\" alt=\"<-\" />\n        Change practice mode\n      </Link>\n\n      <div className=\"practice-container\">\n        <div\n          className=\"highlight\"\n          style={{\n            width: `${28.8 * translate(word[position]).length}px`,\n          }}\n        ></div>\n        <div\n          className=\"question\"\n          style={{\n            transform: `translateX(calc(50vw - (28.8px * ${\n              translate(word.slice(0, position)).length + (position > 0 ? 1 : 0)\n            }) - ((28.8px * ${translate(word[position]).length}) / 2)))`,\n          }}\n        >\n          {translate(word)}\n        </div>\n        <input\n          type=\"text\"\n          className={\n            correct === null ? \"\" : correct ? \"green-input\" : \"red-input\"\n          }\n          onKeyDown={handleInput}\n          value={input}\n        />\n        <div className=\"p-container\">\n          <p>\n            Enter the english translation for the current morse code character\n            in the box above.\n          </p>\n        </div>\n        <div\n          className=\"answer\"\n          style={{ display: answerShown ? \"block\" : \"none\" }}\n        >\n          Answer: {word[position]}\n        </div>\n        <div\n          className=\"reveal-btn\"\n          style={{ display: answerShown ? \"none\" : \"block\" }}\n          onClick={showAnswer}\n        >\n          Show answer\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* Practice\n * menu for selecting a practice mode\n */\n\n/* -- imports -- */\nimport React from \"react\";\nimport { Switch, Link, Route, useRouteMatch } from \"react-router-dom\";\nimport EnglishToMorse from \"./practice/EnglishToMorse\";\nimport MorseToEnglish from \"./practice/MorseToEnglish\";\nimport \"../styles/practice.css\";\n\n// Exported component\nexport default function Practice() {\n  // get current route to add new routes onto\n  let match = useRouteMatch();\n  // return content to be rendered\n  // defines routes for the existing BrowserRouter in a higher level component\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/english-morse`}>\n          <EnglishToMorse />\n        </Route>\n        <Route path={`${match.path}/morse-english`}>\n          <MorseToEnglish />\n        </Route>\n        <Route path={match.path}>\n          <div className=\"container practice-menu-container\">\n            <h1>Select practice mode</h1>\n            <div>\n              <Link to={`${match.path}/morse-english`}>\n                <h2>Morse to English</h2>\n                <p>\n                  Improve your comprehension skills by interpreting written\n                  morse code messages\n                </p>\n              </Link>\n              <Link to={`${match.path}/english-morse`}>\n                <h2>English to Morse</h2>\n                <p>\n                  Hone your morse code writing skills with given english words\n                </p>\n              </Link>\n            </div>\n          </div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","/* Error\n * 404 error page\n */\n\n/* -- imports -- */\nimport React from \"react\";\nimport \"../styles/static.css\";\n\n// Exported component\nexport default function History() {\n  // return static HTML content\n  return (\n    <div className=\"container static\">\n      <h1>404: this page doesn't exist</h1>\n      <p className=\"center\">\n        Either this page has been removed, or you typed the URL incorrectly.\n      </p>\n    </div>\n  );\n}\n","/* App\n * Main app file\n * defines router and navigation bar\n */\n\n/* -- imports -- */\nimport React from \"react\";\n\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n  useLocation,\n} from \"react-router-dom\";\n\nimport * as Pages from \"./pages\";\nimport \"./styles/nav.css\";\nimport \"./styles/transitions.css\";\n\n// exported component\nexport default function App() {\n  // return router\n  return (\n    <Router>\n      <Routes />\n    </Router>\n  );\n}\n\n// define routes for BrowserRouter and navigation bar\nfunction Routes() {\n  // get current location using hook\n  let location = useLocation();\n  // return content to be rendered\n  return (\n    <div>\n      {/* navigation bar - rendered on all pages */}\n      <nav transform=\"translateX(0)\">\n        <Link to=\"/\">dashing</Link>\n        <ul>\n          <li>\n            <NavLink activeClassName=\"activeNavLink\" to=\"/history\">\n              History\n            </NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"activeNavLink\" to=\"/theory\">\n              Theory\n            </NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"activeNavLink\" to=\"/practice\">\n              Practice\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n\n      {/* routing with transitions react-transition-group */}\n      <div className=\"container\">\n        <TransitionGroup>\n          <CSSTransition key={location.key} classNames=\"fade\" timeout={500}>\n            <Switch location={location}>\n              <Route path=\"/practice\" component={Pages.Practice} />\n              <Route path=\"/theory\" component={Pages.Theory} />\n              <Route path=\"/history\" component={Pages.History} />\n              <Route exact path=\"/\" component={Pages.Home} />\n              <Route path=\"/\" component={Pages.Error} />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}